var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/api.ts
import { formatUrl as coreFormatUrl } from "@js-from-routes/core";

// src/config.ts
import { camelCase, snakeCase, deepConvertKeys } from "@js-from-routes/core";
var Config = {
  baseUrl: "",
  deserializeData: (data) => deepConvertKeys(data, camelCase),
  serializeData: (data) => deepConvertKeys(data, snakeCase),
  csrfToken: "",
  getCSRFToken() {
    var _a;
    return Config.csrfToken || ((_a = document.querySelector("meta[name=csrf-token]")) == null ? void 0 : _a.content);
  },
  async fetch(args) {
    const _a = args, { url, data, responseAs } = _a, options = __objRest(_a, ["url", "data", "responseAs"]);
    const requestInit = __spreadValues({
      body: data === void 0 ? data : JSON.stringify(data),
      credentials: "include",
      redirect: "follow"
    }, options);
    return fetch(url, requestInit).then(async (response) => {
      if (response.status >= 200 && response.status < 300)
        return response;
      throw await Config.unwrapResponseError(response, responseAs);
    }).catch(Config.onResponseError);
  },
  headers(_requestInfo) {
    const csrfToken = Config.getCSRFToken();
    return __spreadValues({
      Accept: "application/json",
      "Content-Type": "application/json"
    }, csrfToken ? { "X-CSRF-Token": csrfToken } : {});
  },
  modifyRequest(request2) {
    return request2;
  },
  async onResponseError(error) {
    throw error;
  },
  async unwrapResponse(response, responseAs) {
    Config.withResponse(response);
    if (responseAs === "response")
      return response;
    if (response.status === 204)
      return null;
    return await response[responseAs]().catch(() => null);
  },
  async unwrapResponseError(response, responseAs) {
    const error = new Error(response.statusText);
    error.response = response;
    try {
      const body = await Config.unwrapResponse(response, responseAs);
      error.body = responseAs === "json" ? Config.deserializeData(body) : body;
    } catch {
    }
    return error;
  },
  withResponse(response) {
    const headers = response.headers || {};
    const updatedToken = "get" in headers ? headers.get("x-csrf-token") : headers["x-csrf-token"];
    if (updatedToken)
      Config.csrfToken = updatedToken;
  }
};

// src/api.ts
function definePathHelper(method, pathTemplate) {
  const helper = (options) => request(method, pathTemplate, options);
  helper.path = (options) => formatUrl(pathTemplate, options);
  helper.pathTemplate = pathTemplate;
  helper.httpMethod = method;
  return helper;
}
function formatUrl(urlTemplate, options = {}) {
  let base = urlTemplate.startsWith("/") ? Config.baseUrl : "";
  if (base.endsWith("/"))
    base = base.slice(0, base.length - 1);
  return coreFormatUrl(`${base}${urlTemplate}`, options);
}
async function request(_method, url, options = {}) {
  const {
    data,
    deserializeData = Config.deserializeData,
    fetch: fetch2 = Config.fetch,
    fetchOptions,
    headers,
    params = options.data || options,
    responseAs = "json",
    serializeData = Config.serializeData
  } = options;
  const method = (options.method || _method).toUpperCase();
  if (data && (method === "HEAD" || method === "GET"))
    throw Object.assign(new Error("Request with GET/HEAD method cannot have data."), { data });
  url = formatUrl(url, params);
  const requestOptions = __spreadValues({
    method,
    url,
    data: serializeData(data),
    responseAs,
    headers: __spreadValues(__spreadValues({}, Config.headers({ method, url, options })), headers)
  }, fetchOptions);
  return fetch2(Config.modifyRequest(requestOptions) || requestOptions).then(async (response) => await Config.unwrapResponse(response, responseAs)).then((data2) => responseAs === "json" ? deserializeData(data2) : data2);
}
export {
  Config,
  definePathHelper,
  formatUrl,
  request
};
