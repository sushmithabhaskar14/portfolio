var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/index.ts
import { Inertia } from "@inertiajs/inertia";
import { formatUrl } from "@js-from-routes/core";
function definePathHelper(method, pathTemplate) {
  const helper = (options) => request(method, pathTemplate, options);
  helper.path = (options) => formatUrl(pathTemplate, options);
  helper.pathTemplate = pathTemplate;
  helper.httpMethod = method;
  return helper;
}
function isFormHelper(val, method) {
  return (val == null ? void 0 : val.hasOwnProperty("data")) && val[method];
}
async function request(_method, url, options = {}) {
  const _a = options, { params = options.data || options, data, form = data } = _a, otherOptions = __objRest(_a, ["params", "data", "form"]);
  const config = otherOptions;
  const method = (options.method || _method).toLowerCase();
  url = formatUrl(url, params);
  if (isFormHelper(form, method))
    return form[method](url, config);
  const args = method === "delete" ? [__spreadProps(__spreadValues({}, options), { data })] : [data, options];
  return Inertia[method](url, ...args);
}
export {
  definePathHelper,
  formatUrl,
  request
};
