import { UrlOptions } from '@js-from-routes/core';
export { UrlOptions, formatUrl } from '@js-from-routes/core';
import { VisitOptions } from '@inertiajs/inertia';
export { VisitOptions } from '@inertiajs/inertia';

declare type Method = 'get' | 'delete' | 'post' | 'put' | 'patch';
declare type RequestMethod = (url: string, config: VisitOptions) => Promise<any>;
/**
 * An Inertia.js form helper.
 */
interface FormHelper {
    get: RequestMethod;
    delete: RequestMethod;
    post: RequestMethod;
    put: RequestMethod;
    patch: RequestMethod;
}
/**
 * Options that can be passed to the request method.
 */
interface RequestOptions extends VisitOptions {
    /**
     * The query string parameters to interpolate in the URL.
     */
    params?: UrlOptions;
    /**
     * The body of the request, should be a plain Object or an Inertia.js form.
     */
    data?: any;
    /**
     * An Inertia.js form to submit in the request.
     */
    form?: FormHelper;
}
declare type Options = RequestOptions | UrlOptions;
interface PathHelper {
    <T = any>(options?: Options): Promise<T>;
    path: (params?: UrlOptions) => string;
    pathTemplate: string;
    httpMethod: Method;
}

/**
 * Defines a path helper that can make a request or interpolate a URL path.
 *
 * @param {Method} method  An HTTP method
 * @param {string} pathTemplate The path with params placeholders (if any).
 */
declare function definePathHelper(method: Method, pathTemplate: string): PathHelper;
/**
 * Makes an AJAX request to the API server.
 * @param  {Method}  method HTTP request method
 * @param  {string}  url    May be a template with param placeholders
 * @param  {Options} options Can optionally pass params as a shorthand
 * @return {Promise} The result of the request
 */
declare function request(_method: Method, url: string, options?: Options): Promise<any>;

export { FormHelper, Method, Options, PathHelper, RequestOptions, definePathHelper, request };
